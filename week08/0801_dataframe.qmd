---
title: "データ処理の手法"
keep-ipynb: true
lang: ja
jupyter:
  jupytext:
    formats: 'ipynb,qmd'
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.14.5
  kernelspec:
    display_name: R
    language: R
    name: ir
---

データサイエンスはあらゆる種類のデータを処理・分析し、そこから有益な価値を生み出すことを目的としています。そのためデータの種類や表現方法について理解しておくことは、データサイエンスの基礎を理解する上で重要です。データの種類は数値や文字だけでしょうか。この章ではデータの種類と表現方法について学びます。

## ベクトル

`c()`関数を作ってベクトルオブジェクトを生成します。ベクトルには複数の要素を含めることができ、カンマ`,`で要素を区切って記述します。

```{r}
# 動物の体重
x <- c(6, 3.5, 5.4)
x

# 動物園の来園者数
c(320, 615, 1023)
```

動物の分類群のベクトルを作成しましょう。

```{r}
#| eval: false
# 動物の分類群
c()
```

ベクトルの要素を取り出すには、`[]`演算子を使います。`[]`の中には、取り出したい要素の位置を指定します。Rでは要素を数える際の番号は1から始まります。また`:`演算子を使ってベクトルの要素の範囲を指定することも可能です。

```{r}
x[1] # 最初の要素を取り出す

x[2:3] # 2から3番目の要素を取り出す
```

では、次のコードを実行するとどうなるでしょうか。コードを実行する前に出力結果を予想してみましょう。

```{r}
#| eval: false
x[-2]
```

`c()`関数の性質として、ベクトルの要素に異なるデータ型を与えた場合、ベクトルの要素は全て同じデータ型に変換されます。例えば、数値と文字列を混在させると全ての要素が文字列に変換されます。

```{r}
# ベクトルの要素に数値と文字列を混ぜる
c(1, 2, 3, "a")
```

この出力結果を見ると、数値の1, 2, 3が文字列に変換されていることがわかります。このように、ベクトルの要素は全て同じデータ型に変換されます。同様に論理値も文字列に変換されます。

```{r}
c(TRUE, "真")

# 論理値は数値に変換可能なため、数値が含まれたベクトルでは数値に変換される
c(1, 2, 3, TRUE, FALSE, NA)
```

## データフレーム

データフレームは行と列からなる表形式のデータ構造です。行はデータの個々の観測値を表し、列はデータの変数を表します。

データフレームは、複数のベクトルを組み合わせ、`data.frame()`関数を使って作成します。`data.frame()`関数の引数には、列名となるベクトルを指定します。列名は文字列で指定します。

```{r}
# 動物についてのデータフレームを作成
taxon <- c("食肉類", "霊長類", "霊長類", "食肉類", "鳥類")

# data.frame()関数の引数には、列名となるベクトルを指定する
# ベクトルはdata.frame()関数の外側で定義されたものを与えてもよい
df_animal <- 
  data.frame(
    taxon = taxon,
    species = c("レッサーパンダ", "チンパンジー", "マントヒヒ", "ライオン", "フンボルトペンギン"),
    body_length_cm = c(63.5, 85.0, 80.0, 250.0, 69.0),
    body_weight_kg = c(6, 60, 20, 225, 6)
)

df_animal
```

データ分析や可視化を行う際など、データフレームはよく使われるデータ構造です。データフレームに含まれるデータをもとに、線形回帰モデルの適用や散布図の作成が可能です。

```{r}
# lm()関数を用いた線形回帰モデルの適用
# 体長と体重の関係を表す線形回帰モデルを作成
# y ~ ax + b の一次関数を記述します
lm(body_length_cm ~ body_weight_kg, data = df_animal)
```

```{r}
plot(df_animal$body_weight_kg, df_animal$body_length_cm)
```

```{r}
# ggplot2パッケージを用いた散布図の作成
library(ggplot2)
ggplot(data = df_animal) +
  aes(body_weight_kg, body_length_cm) + geom_point()
```

### csvファイルの読み込み

csvファイルはカンマ`,`で区切られたテキストファイルです。csvファイルはテキストエディタや表計算ソフトで作成できます。編集に特別なソフトウェアを必要としないため、データのやり取りに便利です。

csvファイルを読み込むには`read.csv()`関数を使います。

```{r}
# csvファイルの読み込み
# ローカル環境（自分のコンピュータ）にあるcsvファイルを読み込む場合は、ファイルが保存されている場所（パス）を指定する
# ウェブ上のデータを読み込む場合はURLを指定する
df_animal <-
read.csv("https://raw.githubusercontent.com/uribo/tokupon_ds/main/data-raw/tokushima_zoo_animals22.csv")

# 先頭行のデータを表示
head(df_animal)
```

### データフレームの操作

データフレームの変数の値を参照するにはいくつかの方法があります。代表的なものを紹介します。

1. `$`演算子を使う
2. `[[]]`演算子を使う

例えば、`df_animal`の`body_length_cm`変数にアクセスするには次のようにします。

```{r}
df_animal$body_length_cm

df_animal[["body_length_cm"]]
```

`$`演算子は参照したい変数名を文字列で指定します。`$`演算子は、`[]`演算子と異なり、複数の変数の値を同時に参照することはできません。

また、これらの参照方法はベクトルとして変数の値を確認するものでした。データフレームの構造を維持したまま、つまり特定の列として参照するには`[]`演算子を使います。

```{r}
df_animal[3]
```

ベクトルの参照の例でも見たように、`[]`演算子での参照は`:`演算子や`-`を使った除外が可能です。

```{r}
df_animal[2:3]

df_animal[-4]

df_animal[c(1, 3)]
```

`[]`演算子でのデータフレームの参照では、行と列の両方を指定できます。行と列を指定する場合は、`[行, 列]`の規則で参照する位置を指定します。

```{r}
df_animal[2, c(2, 3)] # 2行目の2,3列のデータ
```

## 次の一歩

- [徳島県オープンデータポータルサイト](https://opendata.pref.tokushima.lg.jp)から適当なデータをダウンロードして、データフレームとして読み込んでみましょう。
    - ファイルのダウンロードは`download.file()`関数を使って行います。
    - エクセルファイルの読み込みは`readxl`パッケージの`read_excel()`関数を使って行います。
